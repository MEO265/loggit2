[{"path":"https://r-loggit.org/dev/articles/fork.html","id":"call-of-conditions","dir":"Articles","previous_headings":"","what":"Call of conditions","title":"Why the Fork?","text":"loggit, “condition log handlers” (loggit::message(), loggit::warning(), loggit::stop()) presented call condition. , combined fact loggit allow passing condition “condition log handlers” (e.g., tryCatch()), made significantly difficult trace origin condition. loggit2, condition handler shows call base equivalent. information comparisons look .","code":"loggit::message(\"This is a message\") #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\"} #> This is a message loggit::warning(\"This is a warning\") #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning in loggit::warning(\"This is a warning\"): This is a warning loggit::stop(\"This is an error\") #> {\"timestamp\": \"2020-05-31T20:59:33-0500\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error in loggit::stop(\"This is an error\"): This is an error base::message(\"This is another message\") #> This is another message loggit2::message(\"This is another message\") #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is another message\\n\"} #> This is another message  base::warning(\"This is another warning\") #> Warning: This is another warning loggit2::warning(\"This is another warning\") #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is another warning\"} #> Warning: This is another warning  base::stop(\"This is another error\") #> Error: This is another error loggit2::stop(\"This is another error\") #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is another error\"} #> Error: This is another error"},{"path":"https://r-loggit.org/dev/articles/fork.html","id":"missing-stopifnot","dir":"Articles","previous_headings":"","what":"Missing stopifnot()","title":"Why the Fork?","text":"loggit, “condition log handlers” (.e., functions work like base equivalents also write log) base::stopifnot(). makes migration existing code (without logs) unnecessarily complicated. loggit2, added:","code":"base::stopifnot(\"TRUE is not true\" = TRUE, \"This is an error\" = 3L < 1L, \"This is another error\" = FALSE) #> Error: This is an error loggit2::stopifnot(\"TRUE is not true\" = TRUE, \"This is an error\" = 3L < 1L, \"This is another error\" = FALSE) #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error: This is an error"},{"path":"https://r-loggit.org/dev/articles/fork.html","id":"log-entries-containing","dir":"Articles","previous_headings":"","what":"Log entries containing :","title":"Why the Fork?","text":"loggit, log entries containing : correctly parsed loggit::read_logs(). best case, log messages truncated :. See also . bug fixed loggit2.","code":""},{"path":"https://r-loggit.org/dev/articles/fork.html","id":"clearing-the-log","dir":"Articles","previous_headings":"","what":"Clearing the log","title":"Why the Fork?","text":"loggit, clearing log loggit::rotate_logs(0L) results log unreadable loggit::read_logs(), even new entries. See also . bug fixed loggit2.","code":""},{"path":"https://r-loggit.org/dev/articles/fork.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Why the Fork?","text":"addition issues, several others, pressing can easily fixed. Apart aforementioned bugs missing features, significant untapped potential control settings (e.g., global settings regarding log levels) can implemented without complicating loggit. aspects addressed loggit2. welcome suggestions new features, bug reports, even direct pull request either topic.","code":""},{"path":"https://r-loggit.org/dev/articles/fork.html","id":"further-comparisons","dir":"Articles","previous_headings":"","what":"Further comparisons","title":"Why the Fork?","text":"loggit, condition handler shows call condition. loggit2, condition handler shows call {base} equivalent.","code":"f <- function() {   loggit::message(\"This is another message\")   loggit::warning(\"This is another warning\")   loggit::stop(\"This is another error\") }  f() #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\"} #> This is a message #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning in loggit::warning(\"This is a warning\"): This is a warning #> {\"timestamp\": \"2020-05-31T20:59:33-0500\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error in loggit::stop(\"This is an error\"): This is an error f <- function() {   base::message(\"This is another message\")   base::warning(\"This is another warning\")   base::stop(\"This is another error\") }  f() #> This is another message #> Warning in f(): This is another warning #> Error in f(): This is another error  f <- function() {   loggit2::message(\"This is another message\")   loggit2::warning(\"This is another warning\")   loggit2::stop(\"This is another error\") }  f() #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is another message\\n\"} #> This is another message #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is another warning\"} #> Warning in f(): This is another warning #> {\"timestamp\": \"2025-01-08T19:22:34+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is another error\"} #> Error in f(): This is another error"},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"configuration-system","dir":"Articles","previous_headings":"","what":"Configuration System","title":"Further Configurations","text":"loggit2 uses three-tier configuration system: Meta/System-wide Configuration Global/Session-wide1 Configuration Local/Function-specific Configuration first tier Meta System-wide Configuration. defined environment variables read loggit2 package loaded. settings serve default values session-wide configuration. second tier Global Session-wide Configuration. defined set_*() functions loggit2. third tier Local Function-specific Configuration, implemented arguments functions. quick overview functions, refer Getting Started Vignette. time function loggit2 called, settings three tiers combined. higher tier/specificity configuration always takes precedence lower tier/specificity configuration.","code":""},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"configuration-options","dir":"Articles","previous_headings":"","what":"Configuration Options","title":"Further Configurations","text":"configuration options loggit2 described . details, refer function documentation.","code":""},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"log-file","dir":"Articles","previous_headings":"Configuration Options","what":"Log file","title":"Further Configurations","text":"log file can set either via environment variable FILE_LOGGIT2, function set_log_file(), logfile argument logging functions loggit() with_loggit(). wrappers base R condition handler always use session-wide configuration.","code":"old_log <- loggit2::set_logfile(logfile = \"logfile.log\") #> Log file set to /tmp/RtmpDP0kVe/logfile.log loggit2::loggit(   log_lvl = \"DEBUG\",   log_msg = \"This message will be logged to `logfile.log`.\" ) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"DEBUG\", \"log_msg\": \"This message will be logged to `logfile.log`.\"}   loggit2::loggit(   log_lvl = \"DEBUG\",   log_msg = \"This message will be logged to `otherlogfile.log`.\",   logfile = \"otherlogfile.log\" ) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"DEBUG\", \"log_msg\": \"This message will be logged to `otherlogfile.log`.\"}   loggit2::with_loggit(logfile = \"logfile2.log\", {   base::message(\"This message will be logged to `logfile2.log`.\") }) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged to `logfile2.log`.\\n\"} #> This message will be logged to `logfile2.log`.  loggit2::set_logfile(old_log) #> Log file set to /tmp/RtmpDP0kVe/loggit.log"},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"log-level","dir":"Articles","previous_headings":"Configuration Options","what":"Log level","title":"Further Configurations","text":"log level can set either via environment variable LEVEL_LOGGIT2 function set_log_level(). .loggit argument can also passed wrappers base R condition handler enforce logging (TRUE) suppress (FALSE). logging function loggit() can enforce logging ignore_log_level argument. with_loggit() allows setting log level code block executed.","code":"old_log_lvl <- loggit2::set_log_level(\"INFO\") #> Log level set to 3 (INFO) loggit2::message(\"This message will be logged, since the log level is INFO.\") #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged, since the log level is INFO.\\n\"} #> This message will be logged, since the log level is INFO. loggit2::loggit(   log_lvl = \"DEBUG\",   log_msg = \"This message will not be logged, since the log level is INFO.\" ) loggit2::loggit(   log_lvl = \"DEBUG\", \"This message will be logged because the log level is ignored.\",   ignore_log_level = TRUE ) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"DEBUG\", \"log_msg\": \"This message will be logged because the log level is ignored.\"} loggit2::warning(   \"This warning message will not be logged, since .loggit = FALSE.\",   .loggit = FALSE ) #> Warning: This warning message will not be logged, since .loggit = FALSE.  loggit2::set_log_level(\"ERROR\") #> Log level set to 1 (ERROR) loggit2::warning(\"This warning will not be logged, since the log level is set to ERROR.\") #> Warning: This warning will not be logged, since the log level is set to ERROR. loggit2::message(\"This message will be logged, since .loggit = TRUE.\", .loggit = TRUE) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged, since .loggit = TRUE.\\n\"} #> This message will be logged, since .loggit = TRUE. loggit2::stop(\"This error message will be logged because the log level is set to ERROR.\") #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This error message will be logged because the log level is set to ERROR.\"} #> Error: This error message will be logged because the log level is set to ERROR.  loggit2::with_loggit(log_level = \"DEBUG\", {   base::message(\"This message will be logged because the log level is set to DEBUG.\") }) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged because the log level is set to DEBUG.\\n\"} #> This message will be logged because the log level is set to DEBUG.  loggit2::set_log_level(old_log_lvl) #> Log level set to 4 (DEBUG)"},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"echo","dir":"Articles","previous_headings":"Configuration Options","what":"Echo","title":"Further Configurations","text":"Whether log messages also output stdout can controlled via environment variable ECHO_LOGGIT2 function set_echo(). Additionally, logging functions wrappers base R condition handler allow direct control via echo argument.","code":"old_echo <- loggit2::set_echo(FALSE) #> Echo set to FALSE loggit2::message(\"This message will not be logged, but it will be output to the console.\") #> This message will not be logged, but it will be output to the console. loggit2::message(\"This message will be logged and output to the console.\", echo = TRUE) #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged and output to the console.\\n\"} #> This message will be logged and output to the console.  loggit2::set_echo(TRUE, confirm = FALSE) loggit2::message(\"This message will be logged and output to the console.\") #> {\"timestamp\": \"2025-01-08T19:22:37+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged and output to the console.\\n\"} #> This message will be logged and output to the console. loggit2::message(\"This message will be logged, but it will not be echoed.\", echo = FALSE) #> This message will be logged, but it will not be echoed.  loggit2::with_loggit(echo = FALSE, {   base::message(\"This message will be logged, but it will not be output to the console.\") }) #> This message will be logged, but it will not be output to the console.  loggit2::set_echo(old_echo) #> Echo set to TRUE"},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"timestamp-format","dir":"Articles","previous_headings":"Configuration Options","what":"Timestamp format","title":"Further Configurations","text":"format timestamp can controlled via environment variable TIMESTAMP_LOGGIT2 function set_timestamp_format().","code":"old_ts <- loggit2::set_timestamp_format(\"%H:%M:%S\") #> Timestamp format set to %H:%M:%S. #> Current time in this format: 19:22:37 loggit2::message(\"This message will be logged with a timestamp in the format HH:MM:SS.\") #> {\"timestamp\": \"19:22:37\", \"log_lvl\": \"INFO\", \"log_msg\": \"This message will be logged with a timestamp in the format HH:MM:SS.\\n\"} #> This message will be logged with a timestamp in the format HH:MM:SS.  loggit2::set_timestamp_format(old_ts) #> Timestamp format set to %Y-%m-%dT%H:%M:%S%z. #> Current time in this format: 2025-01-08T19:22:37+0000"},{"path":"https://r-loggit.org/dev/articles/further_configurations.html","id":"temporary-configuration","dir":"Articles","previous_headings":"","what":"Temporary Configuration","title":"Further Configurations","text":"Depending use case, may useful change temporary configurations, e.g., log different file specific code block log particular part code details (higher log level). One way manually set reset configurations (e.g., using .exit()), cumbersome error-prone. alternative use with_loggit(). mentioned , almost configurations can adjusted directly with_loggit().","code":""},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Getting Started","text":"preparations needed use loggit2. However, recommended explicitly set log file using loggit2::set_logfile(\"path///file\"), loggit2 defaults creating file temporary directory.1 order use full potential loggit2, advisable take look configurations reading vignette.","code":""},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"logging","dir":"Articles","previous_headings":"","what":"Logging","title":"Getting Started","text":"three ways populate log loggit2. First, wrapper functions base R condition handler, second, via loggit() log function, third, logging (external) expressions using with_loggit(). function three methods parameter echo, determines whether log entries also echoed stdout.","code":""},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"condition-log-handling","dir":"Articles","previous_headings":"Logging","what":"Condition Log Handling","title":"Getting Started","text":"loggit2 provides set wrappings base R’s message(), warning(), stop() stopifnot() functions maintain identical functionality2, except additional logging. Thus, sufficient import loggit2 namespace, example using library(\"loggit2\"), prefixing loggit2:: desired locations. Besides echo parameter, functions additional parameter .loggit, allows deactivate logging function behaves exactly like base R equivalents.","code":"base::message(\"This is another message\") #> This is another message loggit2::message(\"This is a message\") #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\\n\"} #> This is a message  base::warning(\"This is another warning\") #> Warning: This is another warning loggit2::warning(\"This is a warning\") #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning: This is a warning  base::stop(\"This is another error\") #> Error: This is another error loggit2::stop(\"This is an error\") #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error: This is an error  base::stopifnot(\"This is another condition\" = FALSE) #> Error: This is another condition loggit2::stopifnot(\"This is another condition\" = FALSE) #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is another condition\"} #> Error: This is another condition loggit2::warning(\"This is a alternative warning\", echo = FALSE) #> Warning: This is a alternative warning  loggit2::warning(\"This is not part of the log\", .loggit = FALSE) #> Warning: This is not part of the log #>                  timestamp log_lvl                       log_msg #> 1 2025-01-08T19:22:39+0000    INFO           This is a message\\n #> 2 2025-01-08T19:22:39+0000    WARN             This is a warning #> 3 2025-01-08T19:22:39+0000   ERROR              This is an error #> 4 2025-01-08T19:22:39+0000   ERROR     This is another condition #> 5 2025-01-08T19:22:39+0000    WARN This is a alternative warning"},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"explicit-log-function","dir":"Articles","previous_headings":"Logging","what":"Explicit Log Function","title":"Getting Started","text":"loggit2 allows direct access core logging function loggit(). enables setting log level directly call creating arbitrary fields log. function trigger conditions; populates log. allow log levels “DEBUG”, “INFO”, “WARN” “ERROR” custom_log_lvl parameter must set.","code":"loggit2::loggit(\"INFO\", \"This is a message\", ID = 1L, boole = TRUE) #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\", \"ID\": \"1\", \"boole\": \"TRUE\"}  loggit2::loggit(\"WARN\", \"This is a alternative warning\", echo = FALSE)  loggit2::loggit(\"DEBUG\", \"This is a message\", Why = \"Because\", echo = FALSE) loggit2::loggit(\"CRITICAL\", \"Critical error\") #> Error in loggit2::loggit(\"CRITICAL\", \"Critical error\"): Nonstandard log_lvl ('CRITICAL'). #> Should be one of DEBUG, INFO, WARN, or ERROR. Please check if you made a typo. #> If you insist on passing a custom level, please set 'custom_log_lvl = TRUE' in the call to 'loggit()'.  loggit2::loggit(\"CRITICAL\", \"Critical error 2\", custom_log_lvl = TRUE) #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"CRITICAL\", \"log_msg\": \"Critical error 2\"} #>                  timestamp  log_lvl                       log_msg   ID boole     Why #> 1 2025-01-08T19:22:39+0000     INFO             This is a message    1  TRUE    <NA> #> 2 2025-01-08T19:22:39+0000     WARN This is a alternative warning <NA>  <NA>    <NA> #> 3 2025-01-08T19:22:39+0000    DEBUG             This is a message <NA>  <NA> Because #> 4 2025-01-08T19:22:39+0000 CRITICAL              Critical error 2 <NA>  <NA>    <NA>"},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"log-expressions","dir":"Articles","previous_headings":"Logging","what":"Log Expressions","title":"Getting Started","text":"One repeatedly encounter situations conditions need logged code without wanting able modify (e.g., dealing functions external packages). case, with_loggit() comes play. function allows logging conditions arbitrary expressions without restricting functionality3 needing modify code. Additionally, with_loggit() allows alternative settings (logfile, echo, etc.) used specific section code.","code":"fun_a <- function(x) {   base::warning(\"This is a warning\")   base::message(\"This is a message\")   base::stopifnot(\"This is true\" = 3L == 1L + 2L, \"This is not TRUE\" = FALSE) }  fun_b <- function(x) {   base::warning(\"This is a second warning\")   5L + 5L } x <- loggit2::with_loggit(fun_b()) #> {\"timestamp\": \"2025-01-08T19:22:39+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a second warning\"} #> Warning in fun_b(): This is a second warning print(x) #> [1] 10 loggit2::with_loggit({   x <- fun_b()   fun_a() }, echo = FALSE) #> Warning in fun_b(): This is a second warning #> Warning in fun_a(): This is a warning #> This is a message #> Error in fun_a(): This is not TRUE #>                  timestamp log_lvl                  log_msg #> 1 2025-01-08T19:22:39+0000    WARN This is a second warning #> 2 2025-01-08T19:22:39+0000    WARN This is a second warning #> 3 2025-01-08T19:22:39+0000    WARN        This is a warning #> 4 2025-01-08T19:22:39+0000    INFO      This is a message\\n #> 5 2025-01-08T19:22:39+0000   ERROR         This is not TRUE"},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"post-processing","dir":"Articles","previous_headings":"","what":"Post-Processing","title":"Getting Started","text":"log little use without ability access modify . possibilities.","code":""},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"accessing-the-log","dir":"Articles","previous_headings":"Post-Processing","what":"Accessing the Log","title":"Getting Started","text":"seen , log can queried data.frame using read_logs(). Alternatively, log can also saved CSV file using convert_to_csv().","code":"loggit2::read_logs() #>                  timestamp log_lvl                  log_msg #> 1 2025-01-08T19:22:39+0000    WARN This is a second warning #> 2 2025-01-08T19:22:39+0000    WARN This is a second warning #> 3 2025-01-08T19:22:39+0000    WARN        This is a warning #> 4 2025-01-08T19:22:39+0000    INFO      This is a message\\n #> 5 2025-01-08T19:22:39+0000   ERROR         This is not TRUE loggit2::convert_to_csv(\"path/to/your/file.csv\")"},{"path":"https://r-loggit.org/dev/articles/loggit2.html","id":"rotating-the-log","dir":"Articles","previous_headings":"Post-Processing","what":"Rotating the Log","title":"Getting Started","text":"maintain clear log even long-running sessions (e.g., Shiny app hosted server), log can restricted last n entries using rotate_logs(n).","code":"loggit2::rotate_logs(2L) #>                  timestamp log_lvl             log_msg #> 1 2025-01-08T19:22:39+0000    INFO This is a message\\n #> 2 2025-01-08T19:22:39+0000   ERROR    This is not TRUE loggit2::rotate_logs(0L) #> [1] timestamp log_lvl   log_msg   #> <0 rows> (or 0-length row.names)"},{"path":"https://r-loggit.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Ollech. Maintainer, author. Ryan Price. Funder, author.","code":""},{"path":"https://r-loggit.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ollech M, Price R (2025). loggit2: Easy--Use, Dependencyless Logger. R package version 2.3.1.9000, https://r-loggit.org/, https://github.com/MEO265/loggit2.","code":"@Manual{,   title = {loggit2: Easy-to-Use, Dependencyless Logger},   author = {Matthias Ollech and Ryan Price},   year = {2025},   note = {R package version 2.3.1.9000, https://r-loggit.org/},   url = {https://github.com/MEO265/loggit2}, }"},{"path":"https://r-loggit.org/dev/index.html","id":"easy-to-use-dependencyless-logger-for-r","dir":"","previous_headings":"","what":"Easy-to-Use, Dependencyless Logger for R","title":"Easy-to-Use, Dependencyless Logger for R","text":"loggit2 easy--use ndJSON logging library R, zero external dependencies. Please see quick examples, read vignettes .","code":""},{"path":"https://r-loggit.org/dev/index.html","id":"why-use-loggit2","dir":"","previous_headings":"","what":"Why use loggit2?","title":"Easy-to-Use, Dependencyless Logger for R","text":"loggit2 takes minimalistic powerful approach logging R: Easy integration, even existing code Flexible logs automatic field creation Logs immediately available data.frame object, ndJSON CSV file Simple external logging (e.g., containers) via ndJSON echo stdout Zero external dependencies Additionally, boilerplate get going loggit2 minimal worst.","code":""},{"path":"https://r-loggit.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Easy-to-Use, Dependencyless Logger for R","text":"loggit2 provides, among functions, set wrappings base R’s message(), warning(), stop() stopifnot() functions maintain identical functionality, except additional logging. Thus, sufficient import loggit2 namespace, example using library(\"loggit2\"), prefixing loggit2:: desired locations. can suppress additional console output using echo = FALSE won’t notice difference base functions (except log filled background). can also directly use logging function loggit() compose much custom logs, e.g. include custom fields prevent throwing actual conditions. configurations necessary : just throw nearly whatever want , ’ll become structured log. Check vignettes details features.","code":"base::message(\"This is another message\") #> This is another message loggit2::message(\"This is a message\") #> {\"timestamp\": \"2024-05-26T16:39:20+0200\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\\n\"} #> This is a message  base::warning(\"This is another warning\") #> Warning: This is another warning loggit2::warning(\"This is a warning\") #> {\"timestamp\": \"2024-05-26T16:39:20+0200\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning: This is a warning  base::stop(\"This is another error\") #> Error in eval(expr, envir, enclos): This is another error loggit2::stop(\"This is an error\") #> {\"timestamp\": \"2024-05-26T16:39:20+0200\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error in eval(expr, envir, enclos): This is an error  base::stopifnot(\"This is another condition\" = FALSE) #> Error: This is another condition loggit2::stopifnot(\"This is another condition\" = FALSE) #> {\"timestamp\": \"2024-05-26T16:39:20+0200\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is another condition\"} #> Error: This is another condition loggit2::loggit(\"ERROR\", \"This will log an error\", anything_else = \"you want to include\") #> {\"timestamp\": \"2024-05-26T16:39:20+0200\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This will log an error\", \"anything_else\": \"you want to include\"}  # Read log file into data frame to implement logic based on entries loggit2::read_logs() #>                  timestamp log_lvl                   log_msg       anything_else #> 1 2024-05-26T16:39:20+0200    INFO       This is a message\\n                <NA> #> 2 2024-05-26T16:39:20+0200    WARN         This is a warning                <NA> #> 3 2024-05-26T16:39:20+0200   ERROR          This is an error                <NA> #> 4 2024-05-26T16:39:20+0200   ERROR This is another condition                <NA> #> 5 2024-05-26T16:39:20+0200   ERROR    This will log an error you want to include"},{"path":"https://r-loggit.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy-to-Use, Dependencyless Logger for R","text":"can install latest CRAN release loggit2 via , get latest development version GitHub via","code":"install.packages(\"loggit2\") devtools::install_github(\"MEO265/loggit2\")"},{"path":"https://r-loggit.org/dev/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Easy-to-Use, Dependencyless Logger for R","text":"package based “loggit” package Ryan Price, specifically version 2.1.1.","code":""},{"path":"https://r-loggit.org/dev/reference/call_2_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Call to String — call_2_string","title":"Convert Call to String — call_2_string","text":"Converts call object string optionally determines full call stack.","code":""},{"path":"https://r-loggit.org/dev/reference/call_2_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Call to String — call_2_string","text":"","code":"call_2_string(call, full_stack = FALSE)"},{"path":"https://r-loggit.org/dev/reference/call_2_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Call to String — call_2_string","text":"call Call object. full_stack Include full call stack?","code":""},{"path":"https://r-loggit.org/dev/reference/call_2_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Call to String — call_2_string","text":"Deparsed call string.","code":""},{"path":"https://r-loggit.org/dev/reference/call_2_string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Call to String — call_2_string","text":"full call stack can determined call current context.","code":""},{"path":"https://r-loggit.org/dev/reference/convert_lvl_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Log Level Input to Integer — convert_lvl_input","title":"Convert Log Level Input to Integer — convert_lvl_input","text":"Convert Log Level Input Integer","code":""},{"path":"https://r-loggit.org/dev/reference/convert_lvl_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Log Level Input to Integer — convert_lvl_input","text":"","code":"convert_lvl_input(level)"},{"path":"https://r-loggit.org/dev/reference/convert_lvl_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Log Level Input to Integer — convert_lvl_input","text":"level Log level character numeric.","code":""},{"path":"https://r-loggit.org/dev/reference/convert_lvl_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Log Level Input to Integer — convert_lvl_input","text":"log level integer.","code":""},{"path":"https://r-loggit.org/dev/reference/convert_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write log to csv file — convert_to_csv","title":"Write log to csv file — convert_to_csv","text":"Creates csv file ndjson log file.","code":""},{"path":"https://r-loggit.org/dev/reference/convert_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write log to csv file — convert_to_csv","text":"","code":"convert_to_csv(   file,   logfile = get_logfile(),   unsanitize = FALSE,   last_first = FALSE,   ... )"},{"path":"https://r-loggit.org/dev/reference/convert_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write log to csv file — convert_to_csv","text":"file Path write csv file . logfile Path log file read . unsanitize escaped special characters unescaped? last_first last log entry first row data frame? ... Additional arguments pass utils::write.csv().","code":""},{"path":"https://r-loggit.org/dev/reference/convert_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write log to csv file — convert_to_csv","text":"Invisible NULL.","code":""},{"path":"https://r-loggit.org/dev/reference/convert_to_csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write log to csv file — convert_to_csv","text":"Unescaping special characters can lead unexpected results. Use unsanitize = TRUE caution.","code":""},{"path":"https://r-loggit.org/dev/reference/convert_to_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write log to csv file — convert_to_csv","text":"","code":"if (FALSE) { # \\dontrun{   convert_to_csv(\"my_log.csv\")    convert_to_csv(\"my_log.csv\", logfile = \"my_log.log\", last_first = TRUE) } # }"},{"path":"https://r-loggit.org/dev/reference/find_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Call of a Parent Function in the Call Hierarchy — find_call","title":"Find the Call of a Parent Function in the Call Hierarchy — find_call","text":"function designed inspect call hierarchy identify call parent function. wrapper environments global R environment IDEs cause ignored.","code":""},{"path":"https://r-loggit.org/dev/reference/find_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Call of a Parent Function in the Call Hierarchy — find_call","text":"","code":"find_call()"},{"path":"https://r-loggit.org/dev/reference/find_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Call of a Parent Function in the Call Hierarchy — find_call","text":"Returns call parent function, NULL call found.","code":""},{"path":"https://r-loggit.org/dev/reference/get_call_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Call Options — get_call_options","title":"Get Call Options — get_call_options","text":"Get Call Options","code":""},{"path":"https://r-loggit.org/dev/reference/get_call_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Call Options — get_call_options","text":"","code":"get_call_options()"},{"path":"https://r-loggit.org/dev/reference/get_call_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Call Options — get_call_options","text":"call options.","code":""},{"path":"https://r-loggit.org/dev/reference/get_echo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get echo — get_echo","title":"Get echo — get_echo","text":"Get echo","code":""},{"path":"https://r-loggit.org/dev/reference/get_echo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get echo — get_echo","text":"","code":"get_echo()"},{"path":"https://r-loggit.org/dev/reference/get_echo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get echo — get_echo","text":"Logical. log messages echoed stdout?","code":""},{"path":"https://r-loggit.org/dev/reference/get_file_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file location — get_file_loc","title":"Get file location — get_file_loc","text":"Get file location call object.","code":""},{"path":"https://r-loggit.org/dev/reference/get_file_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file location — get_file_loc","text":"","code":"get_file_loc(x)"},{"path":"https://r-loggit.org/dev/reference/get_file_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file location — get_file_loc","text":"x Call object.","code":""},{"path":"https://r-loggit.org/dev/reference/get_file_loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file location — get_file_loc","text":"file location string.","code":""},{"path":"https://r-loggit.org/dev/reference/get_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log Level — get_log_level","title":"Get Log Level — get_log_level","text":"Get Log Level","code":""},{"path":"https://r-loggit.org/dev/reference/get_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log Level — get_log_level","text":"","code":"get_log_level()"},{"path":"https://r-loggit.org/dev/reference/get_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log Level — get_log_level","text":"log level.","code":""},{"path":"https://r-loggit.org/dev/reference/get_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log File — get_logfile","title":"Get Log File — get_logfile","text":"Return log file loggit() write default.","code":""},{"path":"https://r-loggit.org/dev/reference/get_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log File — get_logfile","text":"","code":"get_logfile()"},{"path":"https://r-loggit.org/dev/reference/get_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log File — get_logfile","text":"log file path.","code":""},{"path":"https://r-loggit.org/dev/reference/get_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Log File — get_logfile","text":"","code":"get_logfile() #> [1] \"/tmp/RtmpnjI6wX/loggit.log\""},{"path":"https://r-loggit.org/dev/reference/get_lvl_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log Level Integer — get_lvl_int","title":"Get Log Level Integer — get_lvl_int","text":"Get Log Level Integer","code":""},{"path":"https://r-loggit.org/dev/reference/get_lvl_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log Level Integer — get_lvl_int","text":"","code":"get_lvl_int(level)"},{"path":"https://r-loggit.org/dev/reference/get_lvl_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Log Level Integer — get_lvl_int","text":"level Log level character.","code":""},{"path":"https://r-loggit.org/dev/reference/get_lvl_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log Level Integer — get_lvl_int","text":"log level integer.","code":""},{"path":"https://r-loggit.org/dev/reference/get_lvl_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log Level Name — get_lvl_name","title":"Get Log Level Name — get_lvl_name","text":"Get Log Level Name","code":""},{"path":"https://r-loggit.org/dev/reference/get_lvl_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log Level Name — get_lvl_name","text":"","code":"get_lvl_name(level)"},{"path":"https://r-loggit.org/dev/reference/get_lvl_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Log Level Name — get_lvl_name","text":"level Log level integer.","code":""},{"path":"https://r-loggit.org/dev/reference/get_lvl_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log Level Name — get_lvl_name","text":"log level name.","code":""},{"path":"https://r-loggit.org/dev/reference/get_package_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get package name — get_package_name","title":"Get package name — get_package_name","text":"Get package name function.","code":""},{"path":"https://r-loggit.org/dev/reference/get_package_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get package name — get_package_name","text":"","code":"get_package_name(x)"},{"path":"https://r-loggit.org/dev/reference/get_package_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get package name — get_package_name","text":"x Function.","code":""},{"path":"https://r-loggit.org/dev/reference/get_package_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get package name — get_package_name","text":"package location string.","code":""},{"path":"https://r-loggit.org/dev/reference/get_timestamp_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Timestamp Format — get_timestamp_format","title":"Get Timestamp Format — get_timestamp_format","text":"Get timestamp format use output logs.","code":""},{"path":"https://r-loggit.org/dev/reference/get_timestamp_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Timestamp Format — get_timestamp_format","text":"","code":"get_timestamp_format()"},{"path":"https://r-loggit.org/dev/reference/get_timestamp_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Timestamp Format — get_timestamp_format","text":"timestamp format.","code":""},{"path":"https://r-loggit.org/dev/reference/get_timestamp_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Timestamp Format — get_timestamp_format","text":"","code":"get_timestamp_format() #> [1] \"%Y-%m-%dT%H:%M:%S%z\""},{"path":"https://r-loggit.org/dev/reference/loggit.html","id":null,"dir":"Reference","previous_headings":"","what":"Log messages and R objects — loggit","title":"Log messages and R objects — loggit","text":"Log messages R objects ndjson log file.","code":""},{"path":"https://r-loggit.org/dev/reference/loggit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log messages and R objects — loggit","text":"","code":"loggit(   log_lvl,   log_msg,   ...,   echo = get_echo(),   custom_log_lvl = FALSE,   logfile = get_logfile(),   ignore_log_level = FALSE )"},{"path":"https://r-loggit.org/dev/reference/loggit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log messages and R objects — loggit","text":"log_lvl Log level. atomic vector length one (usually character). coerced character. log_msg Log message. atomic vector length one (usually character). coerced character. ... Named arguments, atomic vector length one, wish log. coerced character. names arguments treated column names log. echo log entry (json) echoed stdout well? custom_log_lvl Allow log levels \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"? logfile Path log file write . ignore_log_level Ignore log level set set_log_level()?","code":""},{"path":"https://r-loggit.org/dev/reference/loggit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log messages and R objects — loggit","text":"Invisible NULL.","code":""},{"path":"https://r-loggit.org/dev/reference/loggit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log messages and R objects — loggit","text":"","code":"if (FALSE) { # \\dontrun{   loggit(\"DEBUG\", \"This is a message\")    loggit(\"INFO\", \"This is a message\", echo = FALSE)    loggit(\"CUSTOM\", \"This is a message of a custom log_lvl\", custom_log_lvl = TRUE)    loggit(    \"INFO\", \"This is a message\", but_maybe = \"you want more fields?\",     sure = \"why not?\", like = 2, or = 10, what = \"ever\"   ) } # }"},{"path":"https://r-loggit.org/dev/reference/loggit_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal logging function for custom log fields — loggit_dots","title":"Internal logging function for custom log fields — loggit_dots","text":"function used internally loggit function log messages, levels, custom fields. Similar loggit_internal, additional custom fields, checks fields.","code":""},{"path":"https://r-loggit.org/dev/reference/loggit_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal logging function for custom log fields — loggit_dots","text":"","code":"loggit_dots(log_lvl, log_msg, ..., echo, logfile = get_logfile())"},{"path":"https://r-loggit.org/dev/reference/loggit_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal logging function for custom log fields — loggit_dots","text":"log_lvl Log level. atomic vector length one (usually character). coerced character. log_msg Log message. atomic vector length one (usually character). coerced character. ... Named arguments, atomic vector length one, wish log. coerced character. names arguments treated column names log. echo log entry (json) echoed stdout well? logfile connection, character string naming file write .","code":""},{"path":"https://r-loggit.org/dev/reference/loggit_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal logging function for custom log fields — loggit_dots","text":"Invisible NULL.","code":""},{"path":"https://r-loggit.org/dev/reference/loggit_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal logging function — loggit_internal","title":"Internal logging function — loggit_internal","text":"function used internally loggit function log messages levels. checks performed input, used caution.","code":""},{"path":"https://r-loggit.org/dev/reference/loggit_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal logging function — loggit_internal","text":"","code":"loggit_internal(   log_lvl,   log_msg,   log_call = NULL,   echo = get_echo(),   logfile = get_logfile(),   call_options = get_call_options() )"},{"path":"https://r-loggit.org/dev/reference/loggit_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal logging function — loggit_internal","text":"log_lvl Log level. atomic vector length one (usually character). coerced character. log_msg Log message. atomic vector length one (usually character). coerced character. log_call Call object log call leading log message. echo log entry (json) echoed stdout well? logfile connection, character string naming file write . call_options List options regarding logging call objects. set set_call_options().","code":""},{"path":"https://r-loggit.org/dev/reference/loggit_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal logging function — loggit_internal","text":"Invisible NULL.","code":""},{"path":"https://r-loggit.org/dev/reference/message.html","id":null,"dir":"Reference","previous_headings":"","what":"Message Log Handler — message","title":"Message Log Handler — message","text":"function identical base R's message, includes logging exception message via loggit().","code":""},{"path":"https://r-loggit.org/dev/reference/message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Message Log Handler — message","text":"","code":"message(..., domain = NULL, appendLF = TRUE, .loggit = NA, echo = get_echo())"},{"path":"https://r-loggit.org/dev/reference/message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Message Log Handler — message","text":"... zero objects can coerced character     (pasted together separator) (    message ) single condition object. domain see gettext.  NA, messages     translated, see also note stop. appendLF logical: messages given character string     newline appended? .loggit condition message added log? NA log level set set_log_level() used determine condition logged. echo log entry (json) echoed stdout well?","code":""},{"path":"https://r-loggit.org/dev/reference/message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Message Log Handler — message","text":"Invisible NULL.","code":""},{"path":[]},{"path":"https://r-loggit.org/dev/reference/message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Message Log Handler — message","text":"","code":"if (FALSE) { # \\dontrun{   message(\"Don't say such silly things!\")    message(\"Don't say such silly things!\", appendLF = FALSE, echo = FALSE) } # }"},{"path":"https://r-loggit.org/dev/reference/read_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get log as data.frame — read_logs","title":"Get log as data.frame — read_logs","text":"Returns data.frame containing logs provided ndjson log file.","code":""},{"path":"https://r-loggit.org/dev/reference/read_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get log as data.frame — read_logs","text":"","code":"read_logs(logfile = get_logfile(), unsanitize = TRUE, last_first = FALSE)"},{"path":"https://r-loggit.org/dev/reference/read_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get log as data.frame — read_logs","text":"logfile Path log file read . unsanitize escaped special characters unescaped? last_first last log entry first row data frame?","code":""},{"path":"https://r-loggit.org/dev/reference/read_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get log as data.frame — read_logs","text":"data.frame, columns fields log file.","code":""},{"path":"https://r-loggit.org/dev/reference/read_logs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get log as data.frame — read_logs","text":"read_logs() returns data.frame empty character columns \"timestamp\", \"log_lvl\" \"log_msg\" log file entries.","code":""},{"path":"https://r-loggit.org/dev/reference/read_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get log as data.frame — read_logs","text":"","code":"if (FALSE) { # \\dontrun{   read_logs()    read_logs(last_first = TRUE) } # }"},{"path":"https://r-loggit.org/dev/reference/read_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ndJSON-formatted log file — read_ndjson","title":"Read ndJSON-formatted log file — read_ndjson","text":"Read ndJSON-formatted log file","code":""},{"path":"https://r-loggit.org/dev/reference/read_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ndJSON-formatted log file — read_ndjson","text":"","code":"read_ndjson(logfile, unsanitize = TRUE, last_first = FALSE)"},{"path":"https://r-loggit.org/dev/reference/read_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ndJSON-formatted log file — read_ndjson","text":"logfile Path log file read . unsanitize escaped special characters unescaped? last_first last log entry first row data frame?","code":""},{"path":"https://r-loggit.org/dev/reference/read_ndjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ndJSON-formatted log file — read_ndjson","text":"data.frame, columns fields log file.","code":""},{"path":"https://r-loggit.org/dev/reference/rotate_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate log file — rotate_logs","title":"Rotate log file — rotate_logs","text":"Truncates log file line count provided rotate_lines.","code":""},{"path":"https://r-loggit.org/dev/reference/rotate_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate log file — rotate_logs","text":"","code":"rotate_logs(rotate_lines = 100000L, logfile = get_logfile())"},{"path":"https://r-loggit.org/dev/reference/rotate_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate log file — rotate_logs","text":"rotate_lines number log entries keep logfile. logfile Log file truncate.","code":""},{"path":"https://r-loggit.org/dev/reference/rotate_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate log file — rotate_logs","text":"Invisible NULL.","code":""},{"path":"https://r-loggit.org/dev/reference/rotate_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate log file — rotate_logs","text":"","code":"if (FALSE) { # \\dontrun{   rotate_logs()    rotate_logs(rotate_lines = 0L)    rotate_logs(rotate_lines = 1000L, logfile = \"my_log.log\") } # }"},{"path":"https://r-loggit.org/dev/reference/sanitizers.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitization for ndJSON. — sanitizers","title":"Sanitization for ndJSON. — sanitizers","text":"Sanitizer unsanitizer needed ndjson format requires line valid JSON object, thus special characters must escaped. functions worke way concatenation unsanitizer(sanitizer()) corresponds identity function.","code":""},{"path":"https://r-loggit.org/dev/reference/sanitizers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitization for ndJSON. — sanitizers","text":"","code":"default_ndjson_sanitizer(string)  default_ndjson_unsanitizer(string)"},{"path":"https://r-loggit.org/dev/reference/sanitizers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitization for ndJSON. — sanitizers","text":"string character vector.","code":""},{"path":"https://r-loggit.org/dev/reference/sanitizers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitization for ndJSON. — sanitizers","text":"character vector.","code":""},{"path":"https://r-loggit.org/dev/reference/sanitizers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sanitization for ndJSON. — sanitizers","text":"default sanatizer unsanatizer based following mapping:","code":""},{"path":"https://r-loggit.org/dev/reference/sanitizers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanitization for ndJSON. — sanitizers","text":"","code":"if (FALSE) { # \\dontrun{   default_ndjson_sanitizer('This is \\n an \"example\"')   default_ndjson_unsanitizer('This is \\\\n an \\\\\"example\\\\\"') } # }"},{"path":"https://r-loggit.org/dev/reference/set_call_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Call Options — set_call_options","title":"Set Call Options — set_call_options","text":"Set Call Options","code":""},{"path":"https://r-loggit.org/dev/reference/set_call_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Call Options — set_call_options","text":"","code":"set_call_options(..., .arg_list, confirm = TRUE)"},{"path":"https://r-loggit.org/dev/reference/set_call_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Call Options — set_call_options","text":"... Named arguments set. .arg_list list named arguments set. confirm Print confirmation message call options setting?","code":""},{"path":"https://r-loggit.org/dev/reference/set_call_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Call Options — set_call_options","text":"Invisible previous call options.","code":""},{"path":"https://r-loggit.org/dev/reference/set_call_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Call Options — set_call_options","text":"Call options follows: log_call: Log call condition? full_stack: Log full stack trace? one ... .arg_list can provided.","code":""},{"path":"https://r-loggit.org/dev/reference/set_echo.html","id":null,"dir":"Reference","previous_headings":"","what":"Set echo — set_echo","title":"Set echo — set_echo","text":"Set echo","code":""},{"path":"https://r-loggit.org/dev/reference/set_echo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set echo — set_echo","text":"","code":"set_echo(echo = TRUE, confirm = TRUE)"},{"path":"https://r-loggit.org/dev/reference/set_echo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set echo — set_echo","text":"echo log messages echoed stdout? confirm Print confirmation message echo setting?","code":""},{"path":"https://r-loggit.org/dev/reference/set_echo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set echo — set_echo","text":"Invisible previous echo setting.","code":""},{"path":"https://r-loggit.org/dev/reference/set_echo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set echo — set_echo","text":"","code":"if (FALSE) { # \\dontrun{  set_echo(TRUE)  set_echo(FALSE) } # }"},{"path":"https://r-loggit.org/dev/reference/set_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Log Level — set_log_level","title":"Set Log Level — set_log_level","text":"Set Log Level","code":""},{"path":"https://r-loggit.org/dev/reference/set_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Log Level — set_log_level","text":"","code":"set_log_level(level = \"DEBUG\", confirm = TRUE)"},{"path":"https://r-loggit.org/dev/reference/set_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Log Level — set_log_level","text":"level Log level set, string integer. confirm Print confirmation message log level?","code":""},{"path":"https://r-loggit.org/dev/reference/set_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Log Level — set_log_level","text":"Invisible previous log level.","code":""},{"path":"https://r-loggit.org/dev/reference/set_log_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Log Level — set_log_level","text":"Log levels follows: DEBUG: 4 INFO: 3 WARNING: 2 ERROR: 1 NONE: 0","code":""},{"path":"https://r-loggit.org/dev/reference/set_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Log Level — set_log_level","text":"","code":"if (FALSE) { # \\dontrun{  set_log_level(\"DEBUG\")  set_log_level(\"INFO\")   set_log_level(4)  set_log_level(3) } # }"},{"path":"https://r-loggit.org/dev/reference/set_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Log File — set_logfile","title":"Set Log File — set_logfile","text":"Set log file loggit write default.","code":""},{"path":"https://r-loggit.org/dev/reference/set_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Log File — set_logfile","text":"","code":"set_logfile(logfile = NULL, confirm = TRUE, create = TRUE)"},{"path":"https://r-loggit.org/dev/reference/set_logfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Log File — set_logfile","text":"logfile Absolut relative path log file. attempt made convert path canonical absolute form using normalizePath(). NULL set <tmpdir>/loggit.log. confirm Print confirmation log file setting? create Create log file exist?","code":""},{"path":"https://r-loggit.org/dev/reference/set_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Log File — set_logfile","text":"Invisible previous log file path.","code":""},{"path":"https://r-loggit.org/dev/reference/set_logfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Log File — set_logfile","text":"logs outside temporary directory written set explicitly, per CRAN policy. Therefore, default behavior create file named loggit.log system's temporary directory.","code":""},{"path":"https://r-loggit.org/dev/reference/set_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Log File — set_logfile","text":"","code":"if (FALSE) { # \\dontrun{   set_logfile(\"path/to/logfile.log\") } # }"},{"path":"https://r-loggit.org/dev/reference/set_timestamp_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Timestamp Format — set_timestamp_format","title":"Set Timestamp Format — set_timestamp_format","text":"Set timestamp format use output logs.","code":""},{"path":"https://r-loggit.org/dev/reference/set_timestamp_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Timestamp Format — set_timestamp_format","text":"","code":"set_timestamp_format(ts_format = \"%Y-%m-%dT%H:%M:%S%z\", confirm = TRUE)"},{"path":"https://r-loggit.org/dev/reference/set_timestamp_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Timestamp Format — set_timestamp_format","text":"ts_format ISO date format. confirm Print confirmation message timestamp format?","code":""},{"path":"https://r-loggit.org/dev/reference/set_timestamp_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Timestamp Format — set_timestamp_format","text":"Invisible previous timestamp format.","code":""},{"path":"https://r-loggit.org/dev/reference/set_timestamp_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Timestamp Format — set_timestamp_format","text":"function performs time format validations, echo current time provided format manual validation. function provides means setting timezone, instead relies host system's time configuration provide . enforce consistency across software running host.","code":""},{"path":"https://r-loggit.org/dev/reference/set_timestamp_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Timestamp Format — set_timestamp_format","text":"","code":"if (FALSE) { # \\dontrun{   set_timestamp_format(\"%Y-%m-%d %H:%M:%S\") } # }"},{"path":"https://r-loggit.org/dev/reference/setup_call_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the call options for the application — setup_call_options","title":"Set up the call options for the application — setup_call_options","text":"function sets call options application.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_call_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the call options for the application — setup_call_options","text":"","code":"setup_call_options()"},{"path":"https://r-loggit.org/dev/reference/setup_call_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the call options for the application — setup_call_options","text":"Invisible previous call options.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_echo.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the echo for the application — setup_echo","title":"Set up the echo for the application — setup_echo","text":"function retrieves echo setting environment variable \"ECHO_LOGGIT2\". environment variable set, used echo setting. environment variable set, echo setting set default value.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_echo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the echo for the application — setup_echo","text":"","code":"setup_echo()"},{"path":"https://r-loggit.org/dev/reference/setup_echo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the echo for the application — setup_echo","text":"Invisible previous echo setting.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_echo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up the echo for the application — setup_echo","text":"environment variable must set one : \"TRUE\" \"FALSE\".","code":""},{"path":"https://r-loggit.org/dev/reference/setup_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the log level for the application — setup_log_level","title":"Set up the log level for the application — setup_log_level","text":"function retrieves log level environment variable \"LEVEL_LOGGIT2\". environment variable set, used log level. environment variable set, log level set default value.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the log level for the application — setup_log_level","text":"","code":"setup_log_level()"},{"path":"https://r-loggit.org/dev/reference/setup_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the log level for the application — setup_log_level","text":"Invisible previous log level.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_log_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up the log level for the application — setup_log_level","text":"environment variable must set one : \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\" \"NONE\".","code":""},{"path":"https://r-loggit.org/dev/reference/setup_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the logfile for the application — setup_logfile","title":"Set up the logfile for the application — setup_logfile","text":"function retrieves logfile path environment variable \"FILE_LOGGIT2\". environment variable set, used logfile path. environment variable set, logfile path set default value.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the logfile for the application — setup_logfile","text":"","code":"setup_logfile()"},{"path":"https://r-loggit.org/dev/reference/setup_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the logfile for the application — setup_logfile","text":"Invisible previous log file path.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_timestamp_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up the timestamp format for the application — setup_timestamp_format","title":"Set up the timestamp format for the application — setup_timestamp_format","text":"function retrieves timestamp format environment variable \"TIMESTAMP_LOGGIT2\". environment variable set, used timestamp format. environment variable set, timestamp format set default value.","code":""},{"path":"https://r-loggit.org/dev/reference/setup_timestamp_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up the timestamp format for the application — setup_timestamp_format","text":"","code":"setup_timestamp_format()"},{"path":"https://r-loggit.org/dev/reference/setup_timestamp_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up the timestamp format for the application — setup_timestamp_format","text":"Invisible previous timestamp format.","code":""},{"path":"https://r-loggit.org/dev/reference/split_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a ndJSON object — split_ndjson","title":"Convert a ndJSON object — split_ndjson","text":"Split vector JSON strings list R objects.","code":""},{"path":"https://r-loggit.org/dev/reference/split_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a ndJSON object — split_ndjson","text":"","code":"split_ndjson(x)"},{"path":"https://r-loggit.org/dev/reference/split_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a ndJSON object — split_ndjson","text":"x vector JSON strings.","code":""},{"path":"https://r-loggit.org/dev/reference/split_ndjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a ndJSON object — split_ndjson","text":"list length x, containing two character vectors: keys values.","code":""},{"path":"https://r-loggit.org/dev/reference/split_ndjson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a ndJSON object — split_ndjson","text":"","code":"if (FALSE) { # \\dontrun{   split_ndjson(c('{\"a\": \"1\", \"b\": \"2\"}', '{\"a\": \"3\", \"b\": \"4\", \"c\": \"5\"}')) } # }"},{"path":"https://r-loggit.org/dev/reference/stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop Log Handler — stop","title":"Stop Log Handler — stop","text":"function identical base R's stop, includes logging exception message via loggit().","code":""},{"path":"https://r-loggit.org/dev/reference/stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop Log Handler — stop","text":"","code":"stop(..., call. = TRUE, domain = NULL, .loggit = NA, echo = get_echo())"},{"path":"https://r-loggit.org/dev/reference/stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop Log Handler — stop","text":"... zero objects can coerced character     (pasted together separator) single     condition object. call. logical, indicating call become part     error message. domain see gettext.  NA, messages     translated. .loggit condition message added log? NA log level set set_log_level() used determine condition logged. echo log entry (json) echoed stdout well?","code":""},{"path":"https://r-loggit.org/dev/reference/stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop Log Handler — stop","text":"return value.","code":""},{"path":[]},{"path":"https://r-loggit.org/dev/reference/stop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop Log Handler — stop","text":"","code":"if (FALSE) { # \\dontrun{   stop(\"This is a completely false condition\")    stop(\"This is a completely false condition\", echo = FALSE) } # }"},{"path":"https://r-loggit.org/dev/reference/stopifnot.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Stop Log Handler — stopifnot","title":"Conditional Stop Log Handler — stopifnot","text":"function identical base R's stopifnot, includes logging exception message via loggit().","code":""},{"path":"https://r-loggit.org/dev/reference/stopifnot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Stop Log Handler — stopifnot","text":"","code":"stopifnot(..., exprs, exprObject, local, .loggit = NA, echo = get_echo())"},{"path":"https://r-loggit.org/dev/reference/stopifnot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Stop Log Handler — stopifnot","text":"..., exprs number R expressions, evaluate (logical vector ) TRUE. Use either ... exprs, latter typically unevaluated expression form   Note e.g., positive numbers TRUE, even coerced TRUE, e.g., inside (.) arithmetic computations R. names provided ..., used lieu default error message. exprObject alternative exprs ...:     ‘expression-like’ object, typically     expression, also call,     name, atomic constant TRUE. local (exprs used:) indicates     environment expressions     evaluated; default one stopifnot()     called. .loggit condition message added log? NA log level set set_log_level() used determine condition logged. echo log entry (json) echoed stdout well?","code":"{   expr1   expr2   .... }"},{"path":[]},{"path":"https://r-loggit.org/dev/reference/stopifnot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Stop Log Handler — stopifnot","text":"","code":"if (FALSE) { # \\dontrun{  stopifnot(\"This is a completely false condition\" = FALSE)   stopifnot(5L == 5L, \"This is a completely false condition\" = FALSE, echo = FALSE) } # }"},{"path":"https://r-loggit.org/dev/reference/warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Warning Log Handler — warning","title":"Warning Log Handler — warning","text":"function identical base R's warning, includes logging exception message via loggit().","code":""},{"path":"https://r-loggit.org/dev/reference/warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warning Log Handler — warning","text":"","code":"warning(   ...,   call. = TRUE,   immediate. = FALSE,   noBreaks. = FALSE,   domain = NULL,   .loggit = NA,   echo = get_echo() )"},{"path":"https://r-loggit.org/dev/reference/warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warning Log Handler — warning","text":"... zero objects can coerced character     (pasted together separator) single     condition object. call. logical, indicating call become part     warning message. immediate. logical, indicating call output     immediately, even getOption(\"warn\") <= 0. noBreaks. logical, indicating far possible message     output single line options(warn = 1). domain see gettext.  NA, messages     translated, see also note stop. .loggit condition message added log? NA log level set set_log_level() used determine condition logged. echo log entry (json) echoed stdout well?","code":""},{"path":"https://r-loggit.org/dev/reference/warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warning Log Handler — warning","text":"warning message character string, invisibly.","code":""},{"path":[]},{"path":"https://r-loggit.org/dev/reference/warning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warning Log Handler — warning","text":"","code":"if (FALSE) { # \\dontrun{   warning(\"You may want to review that math\")    warning(\"You may want to review that math\", immediate = FALSE, echo = FALSE) } # }"},{"path":"https://r-loggit.org/dev/reference/with_loggit.html","id":null,"dir":"Reference","previous_headings":"","what":"Log any expressions — with_loggit","title":"Log any expressions — with_loggit","text":"Log code without explicitly use loggit2 handlers. particularly useful code customized, e.g. third-party packages.","code":""},{"path":"https://r-loggit.org/dev/reference/with_loggit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log any expressions — with_loggit","text":"","code":"with_loggit(   exp,   logfile = get_logfile(),   echo = get_echo(),   log_level = get_log_level() )"},{"path":"https://r-loggit.org/dev/reference/with_loggit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log any expressions — with_loggit","text":"exp expression evaluate. logfile Path log file write . echo log entry (json) echoed stdout well? log_level log level use.","code":""},{"path":"https://r-loggit.org/dev/reference/with_loggit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log any expressions — with_loggit","text":"result expression.","code":""},{"path":"https://r-loggit.org/dev/reference/with_loggit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log any expressions — with_loggit","text":"loggit2 handlers already used expression, can lead conditions logged twice (different files).","code":""},{"path":"https://r-loggit.org/dev/reference/with_loggit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log any expressions — with_loggit","text":"","code":"if (FALSE) { # \\dontrun{  x <- with_loggit(5L + 5L)   with_loggit(base::message(\"Test log message\"))   with_loggit(base::warning(\"Test log message\"), echo = FALSE, logfile = \"my_log.log\")   x <- with_loggit({     y <- 5L     base::message(\"Test log message\")     base::warning(\"Test log message\")     1L + y  }) } # }"},{"path":"https://r-loggit.org/dev/reference/write_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Write ndJSON-formatted log file — write_ndjson","title":"Write ndJSON-formatted log file — write_ndjson","text":"Write ndJSON-formatted log file","code":""},{"path":"https://r-loggit.org/dev/reference/write_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write ndJSON-formatted log file — write_ndjson","text":"","code":"write_ndjson(   log_df,   logfile = get_logfile(),   echo = get_echo(),   overwrite = FALSE )"},{"path":"https://r-loggit.org/dev/reference/write_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write ndJSON-formatted log file — write_ndjson","text":"log_df data.frame. Entries converted ndjson, columns fields. logfile connection, character string naming file write . echo log entry (json) echoed stdout well? overwrite Overwrite previous log file?","code":""},{"path":"https://r-loggit.org/dev/reference/write_ndjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write ndJSON-formatted log file — write_ndjson","text":"Invisible NULL.","code":""},{"path":[]},{"path":"https://r-loggit.org/dev/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New Features","title":"loggit2 (development version)","text":"set_call_options() offers new option log condition calls even full call stack. get_call_options() returns current settings.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"minor-changes-development-version","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"loggit2 (development version)","text":"loggit() now checks ... arguments use reserved names, currently log_call timestamp.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"internals-development-version","dir":"Changelog","previous_headings":"","what":"Internals","title":"loggit2 (development version)","text":"Added fallback find_call().","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"loggit2-231","dir":"Changelog","previous_headings":"","what":"loggit2 2.3.1","title":"loggit2 2.3.1","text":"CRAN release: 2024-07-25","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"bugfixes-2-3-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"loggit2 2.3.1","text":"warning() stop() now respect call. = FALSE.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"minor-changes-2-3-1","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"loggit2 2.3.1","text":"small changes increase logging speed wìth_loggit() now opens connection log file beginning block closes end. increases speed logging noticeably, especially many log entries. log file created logging, automatically removed log entries made. conditionMessage() now used extract message conditions. robust con[[\"message\"]] work conditions, especially also rlang conditions.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"loggit2-230","dir":"Changelog","previous_headings":"","what":"loggit2 2.3.0","title":"loggit2 2.3.0","text":"CRAN release: 2024-06-08","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"breaking-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"loggit2 2.3.0","text":"Custom sanitizers unsanitizers longer supported. decision made active user known, functionality severely limits development. custom sanitizers previously used, can simply executed loggit() read_logs(). custom sanitizers used circumvent bugs, please report , can fixed. Special characters longer escaped replacement, rather \"\\\".","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"new-features-2-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"loggit2 2.3.0","text":"Added convert_to_csv() convert log files CSV format. Added with_loggit() log third-party code easily use different loggit() parameters chunk code. NAs now stored null JSON log, read_logs() also restores NA. previously (unintentionally) guaranteed replacing NA \"__NA__\". read_logs() now allows reading logs reverse order using last_first argument. global log level can now set using set_log_level(), used functions unless otherwise stated. log levels : \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"NONE\". Added set_echo() control globally whether log messages echoed console. condition log handlers (e.g., warning()) allow NA parameter .loggit. NA, log level set set_log_level() used determine condition logged. new default behavior, since default log level \"DEBUG\", change behavior existing code. set_* functions now return previous value setting. default settings can now controlled system environment variables FILE_LOGGIT2, TIMESTAMP_LOGGIT2, ECHO_LOGGIT2 LEVEL_LOGGIT2.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"bugfixes-2-3-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"loggit2 2.3.0","text":"read_logs() now correctly reads empty character values \"\", {\"key\": \"\"}. Previously, empty fields read NA. meant rotate_logs() used, entries completely disappear respective JSON object. loggit() now unintentionally “repair” argument names log entries. Previously, names replaced check.names data.frame(), lead unexpected behavior. Names valid JSON keys now escaped according JSON standard.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"minor-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"loggit2 2.3.0","text":"read_logs() now returns data.frame empty character columns “timestamp”, “log_lvl”, “log_msg” instead empty (0x0) data.frame log file entries. JSON reading functions tolerant manual changes log. parameter exprs added stopifnot() included documentation. impact functionality due specific way base::stopifnot() called internally. loggit() now throws error unnamed ... arguments. Previously, silently named fix.empty.names data.frame, lead unexpected behavior. loggit() now also checks length log_lvl log_msg arguments uses first element. Previously, log entry multiplied, leading unintended consequences regarding custom_log_lvl.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"internals-2-3-0","dir":"Changelog","previous_headings":"","what":"Internals","title":"loggit2 2.3.0","text":"write_ndjson longer warns log contains unsanitized line breaks. warning generated package-internal errors (therefore nonsensical CRAN package) custom sanitizer, case one character specifically tested thus provides false sense security. package now requires compilation. necessary JSON parser written C++ faster reading. loggit2 now requires least R 4.0.0.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"loggit2-222","dir":"Changelog","previous_headings":"","what":"loggit2 2.2.2","title":"loggit2 2.2.2","text":"CRAN release: 2024-05-03","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"breaking-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"loggit2 2.2.2","text":"Custom sanitizers unsanitizers must able process character vectors. Previously, processing vectors length one explicitly required.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"new-features-2-2-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"loggit2 2.2.2","text":"message(), warning(), stop() now accept conditions input like base R equivalents. New stopifnot() handler. set_logfile() new argument create allows user create file exist.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"bugfixes-2-2-2","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"loggit2 2.2.2","text":"read_logs() processes entries \": \" correctly. Previously, entries truncated /assigned incorrect columns. message(), warning(), stop() now use call messages condition objects base R equivalents longer give call. warning() stop(), can deviations rare cases, function determines call base R provided R C level, necessary C header. set_logfile() now attempts convert relative paths absolute paths. prevents logfile inadvertently changed switching (even temporarily) working directory. unintended side effect used intentionally, effect can achieved explicitly resetting path. set_logfile() now correctly outputs randomly generated temporary file new path confirmation message NULL given argument. rotate_logs(rotate_lines = 0L) now empties log expected. Additionally, error thrown negative values. rotate_logs() preserves original sanitization log entries. Previously, sanitization lost log rotated values 0 number log entries. read_logs() now correctly reads empty log fields NA_character_. Previously, empty fields read \"\" first entry field empty.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"minor-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"loggit2 2.2.2","text":"set_* functions use message() instead print() confirmation. ensures confirmations longer interfere log via echo. default_ndjson_sanitizer(), exported visible documentation, now follows rules sanitizers.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"documentation-2-2-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"loggit2 2.2.2","text":"Functions internal use (exported) marked longer visible index.","code":""},{"path":"https://r-loggit.org/dev/news/index.html","id":"fork-2-2-2","dir":"Changelog","previous_headings":"","what":"Fork","title":"loggit2 2.2.2","text":"name changed loggit loggit2. maintainership transferred “Ryan Price” “Matthias Ollech”. news older versions, see Ryan Price’s loggit package.","code":""}]
