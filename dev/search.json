[{"path":"http://www.r-loggit.org/dev/articles/articels/fork.html","id":"call-of-conditions","dir":"Articles > Articels","previous_headings":"","what":"Call of conditions","title":"Why the Fork?","text":"loggit, “condition log handlers” (loggit::message(), loggit::warning(), loggit::stop()) presented call condition. , combined fact loggit allow passing condition “condition log handlers” (e.g., tryCatch()), made significantly difficult trace origin condition. loggit2, condition handler shows call base equivalent. information comparisons look .","code":"loggit::message(\"This is a message\") #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\"} #> This is a message loggit::warning(\"This is a warning\") #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning in loggit::warning(\"This is a warning\"): This is a warning loggit::stop(\"This is an error\") #> {\"timestamp\": \"2020-05-31T20:59:33-0500\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error in loggit::stop(\"This is an error\"): This is an error base::message(\"This is another message\") #> This is another message loggit2::message(\"This is another message\") #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is another message\\n\"} #> This is another message  base::warning(\"This is another warning\") #> Warning: This is another warning loggit2::warning(\"This is another warning\") #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is another warning\"} #> Warning: This is another warning  base::stop(\"This is another error\") #> Error in eval(expr, envir, enclos): This is another error loggit2::stop(\"This is another error\") #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is another error\"} #> Error in eval(expr, envir, enclos): This is another error"},{"path":"http://www.r-loggit.org/dev/articles/articels/fork.html","id":"missing-stopifnot","dir":"Articles > Articels","previous_headings":"","what":"Missing stopifnot()","title":"Why the Fork?","text":"loggit, “condition log handlers” (.e., functions work like base equivalents also write log) base::stopifnot(). makes migration existing code (without logs) unnecessarily complicated. loggit2, added:","code":"base::stopifnot(\"TRUE is not true\" = TRUE, \"This is an error\" = 3L < 1L, \"This is another error\" = FALSE) #> Error: This is an error loggit2::stopifnot(\"TRUE is not true\" = TRUE, \"This is an error\" = 3L < 1L, \"This is another error\" = FALSE) #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error: This is an error"},{"path":"http://www.r-loggit.org/dev/articles/articels/fork.html","id":"log-entries-containing","dir":"Articles > Articels","previous_headings":"","what":"Log entries containing :","title":"Why the Fork?","text":"loggit, log entries containing : correctly parsed loggit::read_logs(). best case, log messages truncated :. See also . bug fixed loggit2.","code":""},{"path":"http://www.r-loggit.org/dev/articles/articels/fork.html","id":"clearing-the-log","dir":"Articles > Articels","previous_headings":"","what":"Clearing the log","title":"Why the Fork?","text":"loggit, clearing log loggit::rotate_logs(0L) results log unreadable loggit::read_logs(), even new entries. See also . bug fixed loggit2.","code":""},{"path":"http://www.r-loggit.org/dev/articles/articels/fork.html","id":"conclusion","dir":"Articles > Articels","previous_headings":"","what":"Conclusion","title":"Why the Fork?","text":"addition issues, several others, pressing can easily fixed. Apart aforementioned bugs missing features, significant untapped potential control settings (e.g., global settings regarding log levels) can implemented without complicating loggit. aspects addressed loggit2. welcome suggestions new features, bug reports, even direct pull request either topic.","code":""},{"path":"http://www.r-loggit.org/dev/articles/articels/fork.html","id":"further-comparisons","dir":"Articles > Articels","previous_headings":"","what":"Further comparisons","title":"Why the Fork?","text":"loggit, condition handler shows call condition. loggit2, condition handler shows call {base} equivalent.","code":"f <- function() {   loggit::message(\"This is another message\")   loggit::warning(\"This is another warning\")   loggit::stop(\"This is another error\") }  f() #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\"} #> This is a message #> {\"timestamp\": \"2022-04-12T10:55:02-0500\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning in loggit::warning(\"This is a warning\"): This is a warning #> {\"timestamp\": \"2020-05-31T20:59:33-0500\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error in loggit::stop(\"This is an error\"): This is an error f <- function() {   base::message(\"This is another message\")   base::warning(\"This is another warning\")   base::stop(\"This is another error\") }  f() #> This is another message #> Warning in f(): This is another warning #> Error in f(): This is another error  f <- function() {   loggit2::message(\"This is another message\")   loggit2::warning(\"This is another warning\")   loggit2::stop(\"This is another error\") }  f() #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is another message\\n\"} #> This is another message #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is another warning\"} #> Warning in f(): This is another warning #> {\"timestamp\": \"2024-05-14T17:16:03+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is another error\"} #> Error in f(): This is another error"},{"path":"http://www.r-loggit.org/dev/articles/loggit2.html","id":"how-to-use-loggit2","dir":"Articles","previous_headings":"","what":"How to Use loggit2","title":"Getting Started","text":"write log entry using loggit2 via exception handlers, just load loggit2, set log file location, use handlers always : can see handlers pring loggit()-generated log entry, well base default output. JSON print, wrap call appropriate suppressor (.e. suppressMessages() suppressWarnings()). base text printed, pass echo = FALSE handler. … ’s ! ’ve introduced human-readable, machine-parsable logging workflow! However, surely want control logs. Behind scenes, loggit2’s core function, called loggit(), executed right base handlers sane defaults. However, loggit() function also exported use developer: “wouldn’t just use handlers instead?” loggit() exposes much greater flexibility user, way custom fields. Since JSON considered semi-structured data (sometimes called “schema--read”), can log custom fields like, inconsistently like. just ends text file, column structure worry . , loggit2’s log format special type JSON. JSON objects like lists – data.frames. allow flexibility, read_logs() function available , reads currently-set log file data frame: Notice read_logs() handles columnar inconsistencies mentioned . read_logs() finds field entries don’t , maps empty string log entry. chosen NAs allow consistency re-write. can, however, just replace empty strings NA read, want . can also pass file path read_logs(), read loggit2 log file instead. helpful utilities follows: can control format timestamp logs; defaults ISO format \"%Y-%m-%dT%H:%M:%S%z\", may set using set_timestamp_format(). Note format ultimately passed format.Date(), supplied format needs valid. can control output name & location log file using set_logfile(logfile). Similarly, can retrieve location current log file using get_logfile().","code":"library(loggit2)  set_logfile(\"/path/to/my/log/directory/loggit.log\") # loggit2 enforces no specific file extension message(\"This is a message\") #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\\n\"} #> This is a message warning(\"This is a warning\") #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning: This is a warning stop(\"This is a critical error\") #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is a critical error\"} #> Error in eval(expr, envir, enclos): This is a critical error loggit(\"INFO\", \"This is also a message\") #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is also a message\"} loggit(\"WARN\", \"This is also a warning\") #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is also a warning\"} loggit(\"ERROR\", \"This is an error, but it won't stop\") #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error, but it won't stop\"} loggit(   \"INFO\",   \"This is a message\",   but_maybe = \"you want more fields?\",   sure = \"why not?\",   like = 2 ) #> {\"timestamp\": \"2024-05-14T17:16:07+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\", \"but_maybe\": \"you want more fields?\", \"sure\": \"why not?\", \"like\": \"2\"} read_logs() #>                  timestamp log_lvl                             log_msg             but_maybe     sure like #> 1 2024-05-14T17:16:07+0000    INFO                 This is a message\\n                  <NA>     <NA> <NA> #> 2 2024-05-14T17:16:07+0000    WARN                   This is a warning                  <NA>     <NA> <NA> #> 3 2024-05-14T17:16:07+0000   ERROR            This is a critical error                  <NA>     <NA> <NA> #> 4 2024-05-14T17:16:07+0000    INFO              This is also a message                  <NA>     <NA> <NA> #> 5 2024-05-14T17:16:07+0000    WARN              This is also a warning                  <NA>     <NA> <NA> #> 6 2024-05-14T17:16:07+0000   ERROR This is an error, but it won't stop                  <NA>     <NA> <NA> #> 7 2024-05-14T17:16:07+0000    INFO                   This is a message you want more fields? why not?    2"},{"path":"http://www.r-loggit.org/dev/articles/loggit2.html","id":"things-to-keep-in-mind","dir":"Articles","previous_headings":"","what":"Things to keep in mind","title":"Getting Started","text":"loggit2 default writing R temporary directory. per CRAN policies, package write user’s “home filespace” without approval. Therefore, need set log file logs written disk, using set_logfile(logfile) (recommend working directory, naming “loggit.log”). using loggit2 package, can wrap call .onLoad(), logging set package load. , make set call soon possible (e.g. top script(s), right calls library()); otherwise, logs written persistent storage!","code":""},{"path":"http://www.r-loggit.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Ollech. Maintainer, author. Ryan Price. Funder, author.","code":""},{"path":"http://www.r-loggit.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ollech M, Price R (2024). loggit2: Easy--Use, Dependencyless Logger. R package version 2.2.2.9999, http://www.r-loggit.org/, https://github.com/MEO265/loggit2.","code":"@Manual{,   title = {loggit2: Easy-to-Use, Dependencyless Logger},   author = {Matthias Ollech and Ryan Price},   year = {2024},   note = {R package version 2.2.2.9999, http://www.r-loggit.org/},   url = {https://github.com/MEO265/loggit2}, }"},{"path":"http://www.r-loggit.org/dev/index.html","id":"easy-to-use-dependencyless-logger-for-r","dir":"","previous_headings":"","what":"Easy-to-Use, Dependencyless Logger for R","title":"Easy-to-Use, Dependencyless Logger for R","text":"loggit2 easy--use ndJSON logging library R software, zero external dependencies. Please see quick examples, read vignettes Getting Started guide.","code":""},{"path":"http://www.r-loggit.org/dev/index.html","id":"why-use-loggit2","dir":"","previous_headings":"","what":"Why use loggit2?","title":"Easy-to-Use, Dependencyless Logger for R","text":"loggit2 takes modern approach logging R: Opting use JSON format Highly flexible log streams Enables log data analysis host Zero external dependencies Additionally, boilerplate get going loggit2 minimal worst. need write custom formatters, handlers, levels, etc. – just loggit!","code":""},{"path":"http://www.r-loggit.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Easy-to-Use, Dependencyless Logger for R","text":"quickest way get & running loggit2 nearly nothing. loggit2 provides set wrappings base R’s message(), warning(), stop() functions maintain identical functionality, making sufficient import loggit2 namespace, example using library(\"loggit2\"), prefixing loggit2:: desired locations. can suppress additional console output using echo = FALSE won’t notice difference base functions (except log filled background). can also use loggit() directly compose much custom logs, including entirely custom fields (prevent throwing actual conditions). loggit2 doesn’t require set custom logger objects anything like : just throw whatever want , ’ll become structured log. Check vignettes details.","code":"loggit2::message(\"This is a message\") #> {\"timestamp\": \"2024-05-14T19:06:57+0200\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message__LF__\"} #> This is a message loggit2::warning(\"This is a warning\") #> {\"timestamp\": \"2024-05-14T19:06:57+0200\", \"log_lvl\": \"WARN\", \"log_msg\": \"This is a warning\"} #> Warning: This is a warning loggit2::stop(\"This is an error\") #> {\"timestamp\": \"2024-05-14T19:06:57+0200\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This is an error\"} #> Error in eval(expr, envir, enclos): This is an error base::message(\"This is another message\") #> This is another message loggit2::message(\"This is another message\", echo = FALSE) #> This is another message  base::warning(\"This is another warning\") #> Warning: This is another warning loggit2::warning(\"This is another warning\", echo = FALSE) #> Warning: This is another warning  base::stop(\"This is another error\") #> Error in eval(expr, envir, enclos): This is another error loggit2::stop(\"This is another error\", echo = FALSE) #> Error in eval(expr, envir, enclos): This is another error loggit2::loggit(\"ERROR\", \"This will log an error\", anything_else = \"you want to include\") #> {\"timestamp\": \"2024-05-14T19:06:58+0200\", \"log_lvl\": \"ERROR\", \"log_msg\": \"This will log an error\", \"anything_else\": \"you want to include\"}  # Read log file into data frame to implement logic based on entries loggit2::read_logs() #>                  timestamp log_lvl                   log_msg       anything_else #> 1 2024-05-14T19:06:57+0200    INFO       This is a message\\n                <NA> #> 2 2024-05-14T19:06:57+0200    WARN         This is a warning                <NA> #> 3 2024-05-14T19:06:57+0200   ERROR          This is an error                <NA> #> 4 2024-05-14T19:06:57+0200    INFO This is another message\\n                <NA> #> 5 2024-05-14T19:06:57+0200    WARN   This is another warning                <NA> #> 6 2024-05-14T19:06:57+0200   ERROR     This is another error                <NA> #> 7 2024-05-14T19:06:58+0200   ERROR    This will log an error you want to include"},{"path":"http://www.r-loggit.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy-to-Use, Dependencyless Logger for R","text":"can install latest CRAN release loggit2 via , get latest development version GitHub via","code":"install.packages(\"loggit2\") devtools::install_github(\"MEO265/loggit2\")"},{"path":"http://www.r-loggit.org/dev/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Easy-to-Use, Dependencyless Logger for R","text":"package based “loggit” package Ryan Price, specifically version 2.1.1. Due technical reasons, repository GitHub fork Ryan’s repository.","code":""},{"path":"http://www.r-loggit.org/dev/reference/convert_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write log to csv file — convert_to_csv","title":"Write log to csv file — convert_to_csv","text":"Write log csv file","code":""},{"path":"http://www.r-loggit.org/dev/reference/convert_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write log to csv file — convert_to_csv","text":"","code":"convert_to_csv(file, logfile = get_logfile(), unsanitize = FALSE, ...)"},{"path":"http://www.r-loggit.org/dev/reference/convert_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write log to csv file — convert_to_csv","text":"file Path write csv file logfile Path log file read unsanitize line breaks end messages escaped? ... Additional arguments pass utils::write.table()","code":""},{"path":"http://www.r-loggit.org/dev/reference/convert_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write log to csv file — convert_to_csv","text":"Invisible NULL.","code":""},{"path":"http://www.r-loggit.org/dev/reference/find_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Call of a Parent Function in the Call Hierarchy — find_call","title":"Find the Call of a Parent Function in the Call Hierarchy — find_call","text":"function designed inspect call hierarchy identify call parent function. wrapper environments global R environment IDEs cause ignored.","code":""},{"path":"http://www.r-loggit.org/dev/reference/find_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Call of a Parent Function in the Call Hierarchy — find_call","text":"","code":"find_call()"},{"path":"http://www.r-loggit.org/dev/reference/find_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Call of a Parent Function in the Call Hierarchy — find_call","text":"Returns call parent function, NULL call found.","code":""},{"path":"http://www.r-loggit.org/dev/reference/get_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log File — get_logfile","title":"Get Log File — get_logfile","text":"Return log file loggit() write .","code":""},{"path":"http://www.r-loggit.org/dev/reference/get_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log File — get_logfile","text":"","code":"get_logfile()"},{"path":"http://www.r-loggit.org/dev/reference/get_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log File — get_logfile","text":"log file path.","code":""},{"path":"http://www.r-loggit.org/dev/reference/get_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Log File — get_logfile","text":"","code":"get_logfile() #> [1] \"/tmp/Rtmpbe25D6/loggit.log\""},{"path":"http://www.r-loggit.org/dev/reference/get_timestamp_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Timestamp Format — get_timestamp_format","title":"Get Timestamp Format — get_timestamp_format","text":"Get timestamp format use output logs.","code":""},{"path":"http://www.r-loggit.org/dev/reference/get_timestamp_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Timestamp Format — get_timestamp_format","text":"","code":"get_timestamp_format()"},{"path":"http://www.r-loggit.org/dev/reference/get_timestamp_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Timestamp Format — get_timestamp_format","text":"timestamp format.","code":""},{"path":"http://www.r-loggit.org/dev/reference/get_timestamp_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Timestamp Format — get_timestamp_format","text":"","code":"get_timestamp_format() #> [1] \"%Y-%m-%dT%H:%M:%S%z\""},{"path":"http://www.r-loggit.org/dev/reference/loggit.html","id":null,"dir":"Reference","previous_headings":"","what":"Log entries to file — loggit","title":"Log entries to file — loggit","text":"Log entries ndjson log file, defined set_logfile().","code":""},{"path":"http://www.r-loggit.org/dev/reference/loggit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log entries to file — loggit","text":"","code":"loggit(   log_lvl,   log_msg,   ...,   echo = TRUE,   custom_log_lvl = FALSE,   logfile = get_logfile() )"},{"path":"http://www.r-loggit.org/dev/reference/loggit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log entries to file — loggit","text":"log_lvl Log level coerceable character. details see parameter custom_log_lvl. log_msg Main log message. coerced class character. ... Named arguments, atomic vector length one, wish log. names arguments treated column names log. echo log file entry printed console well? Defaults TRUE. custom_log_lvl Allow log levels \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"? Defaults FALSE. logfile Log file write . Defaults currently-configured log file.","code":""},{"path":"http://www.r-loggit.org/dev/reference/loggit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log entries to file — loggit","text":"Invisible NULL.","code":""},{"path":"http://www.r-loggit.org/dev/reference/loggit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log entries to file — loggit","text":"","code":"loggit(\"INFO\", \"This is a message\", but_maybe = \"you want more fields?\",   sure = \"why not?\", like = 2, or = 10, what = \"ever\") #> {\"timestamp\": \"2024-05-14T17:16:00+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"This is a message\", \"but_maybe\": \"you want more fields?\", \"sure\": \"why not?\", \"like\": \"2\", \"or\": \"10\", \"what\": \"ever\"}"},{"path":"http://www.r-loggit.org/dev/reference/message.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Messages Log Handler — message","title":"Diagnostic Messages Log Handler — message","text":"function identical base R's message, includes logging exception message via loggit().","code":""},{"path":"http://www.r-loggit.org/dev/reference/message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Messages Log Handler — message","text":"","code":"message(..., domain = NULL, appendLF = TRUE, .loggit = TRUE, echo = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Messages Log Handler — message","text":"... zero objects can coerced character     (pasted together separator) (    message ) single condition object. domain see gettext.  NA, messages     translated, see also note stop. appendLF logical: messages given character string     newline appended? .loggit loggit() execute? Defaults TRUE. echo loggit()'s log entry echoed console, well? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Messages Log Handler — message","text":"Invisible NULL.","code":""},{"path":[]},{"path":"http://www.r-loggit.org/dev/reference/message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Messages Log Handler — message","text":"","code":"if (2 < 1) message(\"Don't say such silly things!\")"},{"path":"http://www.r-loggit.org/dev/reference/read_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Return log file as an R data frame — read_logs","title":"Return log file as an R data frame — read_logs","text":"function returns data.frame containing logs provided ndjson log file.","code":""},{"path":"http://www.r-loggit.org/dev/reference/read_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return log file as an R data frame — read_logs","text":"","code":"read_logs(logfile = get_logfile(), unsanitize = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/read_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return log file as an R data frame — read_logs","text":"logfile Path log file. unsanitize log messages unsanitized?","code":""},{"path":"http://www.r-loggit.org/dev/reference/read_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return log file as an R data frame — read_logs","text":"data.frame.","code":""},{"path":"http://www.r-loggit.org/dev/reference/read_logs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return log file as an R data frame — read_logs","text":"read_logs() returns data.frame empty character columns \"timestamp\", \"log_lvl\" \"log_msg\" log file entries.","code":""},{"path":"http://www.r-loggit.org/dev/reference/read_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return log file as an R data frame — read_logs","text":"","code":"set_logfile(file.path(tempdir(), \"loggit.log\"), confirm = FALSE)   message(\"Test log message\") #> {\"timestamp\": \"2024-05-14T17:16:00+0000\", \"log_lvl\": \"INFO\", \"log_msg\": \"Test log message\\n\"} #> Test log message   read_logs() #>                  timestamp log_lvl            log_msg             but_maybe #> 1 2024-05-14T17:16:00+0000    INFO  This is a message you want more fields? #> 2 2024-05-14T17:16:00+0000    INFO Test log message\\n                  <NA> #>       sure like   or what #> 1 why not?    2   10 ever #> 2     <NA> <NA> <NA> <NA>"},{"path":"http://www.r-loggit.org/dev/reference/read_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ndJSON-formatted log file — read_ndjson","title":"Read ndJSON-formatted log file — read_ndjson","text":"Read ndJSON-formatted log file","code":""},{"path":"http://www.r-loggit.org/dev/reference/read_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ndJSON-formatted log file — read_ndjson","text":"","code":"read_ndjson(logfile, unsanitize = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/read_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ndJSON-formatted log file — read_ndjson","text":"logfile Log file read , convert data.frame. unsanitize log data unsanitized?","code":""},{"path":"http://www.r-loggit.org/dev/reference/read_ndjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ndJSON-formatted log file — read_ndjson","text":"data.frame","code":""},{"path":"http://www.r-loggit.org/dev/reference/rotate_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate log file — rotate_logs","title":"Rotate log file — rotate_logs","text":"Truncates log file line count provided rotate_lines.","code":""},{"path":"http://www.r-loggit.org/dev/reference/rotate_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate log file — rotate_logs","text":"","code":"rotate_logs(rotate_lines = 100000L, logfile = get_logfile())"},{"path":"http://www.r-loggit.org/dev/reference/rotate_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate log file — rotate_logs","text":"rotate_lines number log entries keep logfile. logfile Log file truncate.","code":""},{"path":"http://www.r-loggit.org/dev/reference/rotate_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate log file — rotate_logs","text":"Invisible NULL.","code":""},{"path":"http://www.r-loggit.org/dev/reference/rotate_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate log file — rotate_logs","text":"","code":"# Truncate \"default\" log file to 100 lines   set_logfile() #> Log file set to /tmp/Rtmpbe25D6/loggit.log   for (i in 1:150) {loggit(\"INFO\", i, echo = FALSE)}   rotate_logs(100)    # Truncate a different log file to 250 lines   another_log <- file.path(tempdir(), \"another.log\")   set_logfile(another_log) #> Log file set to /tmp/Rtmpbe25D6/another.log   for (i in 1:300) {loggit(\"INFO\", i, echo = FALSE)}   set_logfile() # clears pointer to other log file #> Log file set to /tmp/Rtmpbe25D6/loggit.log   rotate_logs(250, another_log)"},{"path":"http://www.r-loggit.org/dev/reference/sanitizers.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitization for ndJSON. — sanitizers","title":"Sanitization for ndJSON. — sanitizers","text":"Sanitizers unsanitizers functions, one parameter, convert character vector (length) another (length). Associated sanitizer unsanitizer constructed way concatenation unsanitizer(sanitizer()) corresponds identity function.","code":""},{"path":"http://www.r-loggit.org/dev/reference/sanitizers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitization for ndJSON. — sanitizers","text":"","code":"default_ndjson_sanitizer(string)  default_ndjson_unsanitizer(string)"},{"path":"http://www.r-loggit.org/dev/reference/sanitizers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitization for ndJSON. — sanitizers","text":"string character vector","code":""},{"path":"http://www.r-loggit.org/dev/reference/sanitizers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitization for ndJSON. — sanitizers","text":"character vector","code":""},{"path":"http://www.r-loggit.org/dev/reference/sanitizers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sanitization for ndJSON. — sanitizers","text":"default sanatizer unsanatizer based following mapping: type function needed characters JSON appear unescaped since loggit2 reimplements simple string-based JSON parser.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Log File — set_logfile","title":"Set Log File — set_logfile","text":"Set log file loggit write .","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Log File — set_logfile","text":"","code":"set_logfile(logfile = NULL, confirm = TRUE, create = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/set_logfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Log File — set_logfile","text":"logfile Absolut relative path log file. attempt made convert path canonical absolute form using normalizePath(). NULL set <tmpdir>/loggit.log. confirm Print confirmation log file setting? Defaults TRUE. create Create log file exist? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Log File — set_logfile","text":"Invisible NULL.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_logfile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Log File — set_logfile","text":"logs outside temporary directory written set explicitly, per CRAN policy. Therefore, default behavior create file named loggit.log system's temporary directory.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Log File — set_logfile","text":"","code":"set_logfile(file.path(tempdir(), \"loggit.log\")) #> Log file set to /tmp/Rtmpbe25D6/loggit.log"},{"path":"http://www.r-loggit.org/dev/reference/set_timestamp_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Timestamp Format — set_timestamp_format","title":"Set Timestamp Format — set_timestamp_format","text":"Set timestamp format use output logs.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_timestamp_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Timestamp Format — set_timestamp_format","text":"","code":"set_timestamp_format(ts_format = \"%Y-%m-%dT%H:%M:%S%z\", confirm = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/set_timestamp_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Timestamp Format — set_timestamp_format","text":"ts_format ISO date format. Defaults ISO-8601 (e.g. \"2020-01-01T00:00:00+0000\"). confirm Print confirmation message timestamp format? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_timestamp_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Timestamp Format — set_timestamp_format","text":"Invisible NULL.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_timestamp_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Timestamp Format — set_timestamp_format","text":"function performs time format validations, echo current time provided format manual validation. function provides means setting timezone, instead relies host system's time configuration provide . enforce consistency across software running host.","code":""},{"path":"http://www.r-loggit.org/dev/reference/set_timestamp_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Timestamp Format — set_timestamp_format","text":"","code":"set_timestamp_format(\"%Y-%m-%d %H:%M:%S\") #> Timestamp format set to %Y-%m-%d %H:%M:%S. #> Current time in this format: 2024-05-14 17:16:01"},{"path":"http://www.r-loggit.org/dev/reference/stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop Function Log Handler — stop","title":"Stop Function Log Handler — stop","text":"function identical base R's stop, includes logging exception message via loggit().","code":""},{"path":"http://www.r-loggit.org/dev/reference/stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop Function Log Handler — stop","text":"","code":"stop(..., call. = TRUE, domain = NULL, .loggit = TRUE, echo = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop Function Log Handler — stop","text":"... zero objects can coerced character     (pasted together separator) single     condition object. call. logical, indicating call become part     error message. domain see gettext.  NA, messages     translated. .loggit loggit() execute? Defaults TRUE. echo loggit()'s log entry echoed console, well? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop Function Log Handler — stop","text":"return value.","code":""},{"path":[]},{"path":"http://www.r-loggit.org/dev/reference/stop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop Function Log Handler — stop","text":"","code":"if (2 < 1) stop(\"This is a completely false condition, which throws an error\")"},{"path":"http://www.r-loggit.org/dev/reference/stopifnot.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Stop Function Log Handler — stopifnot","title":"Conditional Stop Function Log Handler — stopifnot","text":"function identical base R's stopifnot, includes logging exception message via loggit().","code":""},{"path":"http://www.r-loggit.org/dev/reference/stopifnot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Stop Function Log Handler — stopifnot","text":"","code":"stopifnot(..., exprObject, local, .loggit = TRUE, echo = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/stopifnot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Stop Function Log Handler — stopifnot","text":"... zero objects can coerced character     (pasted together separator) (    message ) single condition object. exprObject alternative exprs ...:     ‘expression-like’ object, typically     expression, also call,     name, atomic constant TRUE. local (exprs used:) indicates     environment expressions     evaluated; default one stopifnot()     called. .loggit loggit() execute? Defaults TRUE. echo loggit()'s log entry echoed console, well? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/stopifnot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Stop Function Log Handler — stopifnot","text":"(NULL statements ... TRUE.)","code":""},{"path":[]},{"path":"http://www.r-loggit.org/dev/reference/stopifnot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Stop Function Log Handler — stopifnot","text":"","code":"stopifnot(\"This is a completely false condition, which throws an error\" = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Warning Messages Log Handler — warning","title":"Warning Messages Log Handler — warning","text":"function identical base R's warning, includes logging exception message via loggit().","code":""},{"path":"http://www.r-loggit.org/dev/reference/warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warning Messages Log Handler — warning","text":"","code":"warning(   ...,   call. = TRUE,   immediate. = FALSE,   noBreaks. = FALSE,   domain = NULL,   .loggit = TRUE,   echo = TRUE )"},{"path":"http://www.r-loggit.org/dev/reference/warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warning Messages Log Handler — warning","text":"... zero objects can coerced character     (pasted together separator) single     condition object. call. logical, indicating call become part     warning message. immediate. logical, indicating call output     immediately, even getOption(\"warn\") <= 0. noBreaks. logical, indicating far possible message     output single line options(warn = 1). domain see gettext.  NA, messages     translated, see also note stop. .loggit loggit() execute? Defaults TRUE. echo loggit()'s log entry echoed console, well? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warning Messages Log Handler — warning","text":"warning message character string, invisibly.","code":""},{"path":[]},{"path":"http://www.r-loggit.org/dev/reference/warning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warning Messages Log Handler — warning","text":"","code":"if (2 < 1) warning(\"You may want to review that math, and so this is your warning\")"},{"path":"http://www.r-loggit.org/dev/reference/with_loggit.html","id":null,"dir":"Reference","previous_headings":"","what":"Log any expressions — with_loggit","title":"Log any expressions — with_loggit","text":"Log code without explicitly use loggit2 handlers. particularly useful code customized, e.g. third-party packages","code":""},{"path":"http://www.r-loggit.org/dev/reference/with_loggit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log any expressions — with_loggit","text":"","code":"with_loggit(exp, logfile = get_logfile(), echo = TRUE)"},{"path":"http://www.r-loggit.org/dev/reference/with_loggit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log any expressions — with_loggit","text":"exp expression evaluate. logfile Log file write . Defaults currently-configured log file. echo log file entry printed console well? Defaults TRUE.","code":""},{"path":"http://www.r-loggit.org/dev/reference/with_loggit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log any expressions — with_loggit","text":"result expression.","code":""},{"path":"http://www.r-loggit.org/dev/reference/with_loggit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log any expressions — with_loggit","text":"loggit2 handlers already used expression, can lead conditions logged twice (different files)","code":""},{"path":"http://www.r-loggit.org/dev/reference/write_ndjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Write ndJSON-formatted log file — write_ndjson","title":"Write ndJSON-formatted log file — write_ndjson","text":"Write ndJSON-formatted log file","code":""},{"path":"http://www.r-loggit.org/dev/reference/write_ndjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write ndJSON-formatted log file — write_ndjson","text":"","code":"write_ndjson(log_df, logfile = get_logfile(), echo = TRUE, overwrite = FALSE)"},{"path":"http://www.r-loggit.org/dev/reference/write_ndjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write ndJSON-formatted log file — write_ndjson","text":"log_df Data frame log data. Rows converted ndjson entries, columns fields. logfile Log file write . Defaults currently-configured log file. echo Echo ndjson entry R console? Defaults TRUE. overwrite Overwrite previous log file data? Defaults FALSE, append new log entries log file.","code":""},{"path":[]},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"breaking-changes-development-version","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"loggit2 (development version)","text":"Custom sanitizers unsanitizers longer supported. decision made active user known functionality severely limits development. custom sanitizers previously used, simply executed instead loggit() read_logs(). custom sanitizer used get around bugs, please report can fixed. Special characters longer escaped replacement, rather “\".","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"loggit2 (development version)","text":"Add convert_to_csv() convert log files CSV format. Add with_loggit() log third-party code easily use different loggit()-parameters chunk code. NAs now stored null json log. read_logs() also restores NA. previously (unintentionally) guaranteed replacing NA \"__NA__\".","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"bugfixes-development-version","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"loggit2 (development version)","text":"read_logs() now correctly reads empty character values \"\", {\"key\": \"\"}, . Previously, empty fields read NA. meant rotate_logs() used, entries completely disappear respective json object","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"minor-changes-development-version","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"loggit2 (development version)","text":"read_logs() now returns data.frame empty character columns “timestamp”, “log_lvl” “log_msg” instead empty (0x0) data.frame log file entries. Json reading functions tolerant manual changes log.","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"internals-development-version","dir":"Changelog","previous_headings":"","what":"Internals","title":"loggit2 (development version)","text":"write_ndjson longer warns log contains unsanitized line breaks. warning generated package-internal errors (therefore nonsensical cran package) custom sanitizer, case one character specifically tested thus provides false sense security. package now requires compilation. necessary JSON parser written C++ faster reading.","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"loggit2-222","dir":"Changelog","previous_headings":"","what":"loggit2 2.2.2","title":"loggit2 2.2.2","text":"CRAN release: 2024-05-03","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"breaking-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"loggit2 2.2.2","text":"Custom sanitizers unsanitizers must able process character vectors. Previously, processing vectors length one explicitly required.","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"new-features-2-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"loggit2 2.2.2","text":"message(), warning(), stop() now accept conditions input like base R equivalents. New stopifnot() handler. set_logfile() new argument create allows user create file exist.","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"bugfixes-2-2-2","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"loggit2 2.2.2","text":"read_logs() processes entries \": \" correctly. Previously, entries truncated /assigned incorrect columns. message(), warning(), stop() now use call messages condition objects base R equivalents longer give call. warning() stop(), can deviations rare cases, function determines call base R provided R C level, necessary C header. set_logfile() now attempts convert relative paths absolute paths. prevents logfile inadvertently changed switching (even temporarily) Working Directory. unintended side effect used intentionally, effect can achieved explicitly resetting path. set_logfile() now correctly outputs randomly generated temporary file new path confirmation message, NULL given argument. rotate_logs(rotate_lines = 0L) now empties log expected. Additionally, error thrown negative values. rotate_logs() preserves original sanitization log entries. Previously, sanitization lost log rotated, values 0 number log-entries. read_logs() now correctly reads empty log fields NA_character_. Previously, empty fields read \"\", first entry field empty.","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"minor-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"loggit2 2.2.2","text":"set_* functions use message instead print confirmation. ensures confirmations longer interfere log via echo. default_ndjson_sanitizer(), exported visible documentation, now follows rules sanitizer","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"documentation-2-2-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"loggit2 2.2.2","text":"Functions internal use (exported) marked longer visible index","code":""},{"path":"http://www.r-loggit.org/dev/news/index.html","id":"fork-2-2-2","dir":"Changelog","previous_headings":"","what":"Fork","title":"loggit2 2.2.2","text":"name changed loggit loggit2 maintainership transferred “Ryan Price” “Matthias Ollech” news older versions, see Ryan Price’s loggit package","code":""}]
